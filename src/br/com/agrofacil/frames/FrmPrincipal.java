package br.com.agrofacil.frames;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


import br.com.agrofacil.entity.Funcionario;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Kelson
 */
public class FrmPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form NewMDIApplication
     */
    
    private Funcionario user;
    
    public FrmPrincipal(Funcionario user) {
        this.user = user;
        initComponents();
        initMyComponents();

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        this.setPreferredSize(screenSize);  
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        btTransacao = new javax.swing.JButton();
        txtTransacao = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jmenuTree = new javax.swing.JTree();
        jLabel2 = new javax.swing.JLabel();
        txtNomeUsuario = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        desktopPane.setPreferredSize(new java.awt.Dimension(800, 600));

        btTransacao.setText("Acessar");
        btTransacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTransacaoActionPerformed(evt);
            }
        });

        txtTransacao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTransacaoKeyPressed(evt);
            }
        });

        jLabel1.setText("Digite a Transação:");

        jScrollPane1.setAutoscrolls(true);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("AGROFÁCIL");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Cadastros");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Safras");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Unidades de Medida");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Composições");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Espaçamentos");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Frente Transportes");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Variedades");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Municípios");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Centros de Custo");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Unidades Industriais");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Operações");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Empresas");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Insumos");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Equipamentos");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Fazendas");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Setores");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Talhoes");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Ordem Corte Muda");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Objetivos de Safra");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Perfis");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Funcionarios");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Ordem Corte Producao");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Apontamentos");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Apontamento Produção");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Apontamento Manual");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Apontamento Insumos");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Apontamento Plantios");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Relatórios");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Empresas");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Produtividade");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        jmenuTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jmenuTree.setAutoscrolls(true);
        jmenuTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jmenuTreeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jmenuTree);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setText("Usuário:");

        txtNomeUsuario.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N

        helpMenu.setMnemonic('h');
        helpMenu.setText("Ajuda");

        contentMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK));
        contentMenuItem.setMnemonic('c');
        contentMenuItem.setText("Transações");
        contentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contentMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(contentMenuItem);

        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("Sobre");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem2.setText("Logout");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItem2);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem1.setText("Sair");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItem1);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 675, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtTransacao, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btTransacao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNomeUsuario)
                        .addGap(28, 28, 28))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btTransacao)
                    .addComponent(txtTransacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(txtNomeUsuario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btTransacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTransacaoActionPerformed
        // TODO add your handling code here:
        if (txtTransacao.getText().trim().toUpperCase().equals("CAD001")){            
            FrmEspacamento dialog = new FrmEspacamento(this);        
        
            desktopPane.removeAll();        
            desktopPane.add(dialog);
            
            try {
                dialog.setMaximum(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            dialog.setVisible(true);
        } else if (txtTransacao.getText().toUpperCase().equals("CAD002")) {
            FrmComposicao dialog = new FrmComposicao(this);        
            
            desktopPane.removeAll();        
            desktopPane.add(dialog);
            
            try {
                dialog.setMaximum(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            dialog.setVisible(true);
        } else if (txtTransacao.getText().toUpperCase().equals("CAD003")) {
            FrmUnidadeMedida dialog = new FrmUnidadeMedida(this);        
        
            desktopPane.removeAll();        
            desktopPane.add(dialog);

            try {
                dialog.setMaximum(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            dialog.setVisible(true);
        }   else if (txtTransacao.getText().toUpperCase().equals("CAD004")) {
            FrmSafra dialog = new FrmSafra(this);        
        
            desktopPane.removeAll();        
            desktopPane.add(dialog);
            
            try {
                dialog.setMaximum(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            dialog.setVisible(true);
        }   else if (txtTransacao.getText().toUpperCase().equals("CAD005")) {
            FrmFrenteTransporte dialog = new FrmFrenteTransporte(this);        
        
            desktopPane.removeAll();        
            desktopPane.add(dialog);
            
            try {
                dialog.setMaximum(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            dialog.setVisible(true);
        }  else if (txtTransacao.getText().toUpperCase().equals("CAD006")) {
            try {
                FrmVariedade dialog = new FrmVariedade(this);
                desktopPane.removeAll();        
                desktopPane.add(dialog);
                
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (txtTransacao.getText().toUpperCase().equals("CAD007")) {
                FrmMunicipio dialog = new FrmMunicipio(this);
                desktopPane.removeAll();        
                desktopPane.add(dialog);
                
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
        }else if (txtTransacao.getText().toUpperCase().equals("CAD008")) {
                FrmCentroCusto dialog = new FrmCentroCusto(this);
                desktopPane.removeAll();        
                desktopPane.add(dialog);
                
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
        }   else if (txtTransacao.getText().toUpperCase().equals("CAD009")) {
            try {
                FrmUnidadeIndustrial dialog = new FrmUnidadeIndustrial(this);
                desktopPane.removeAll();        
                desktopPane.add(dialog);
                
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }  else if (txtTransacao.getText().toUpperCase().equals("CAD010")) {
            try {
                FrmOperacao dialog = new FrmOperacao(this);
                desktopPane.removeAll();        
                desktopPane.add(dialog);
                
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (txtTransacao.getText().toUpperCase().equals("CAD011")) {
            try {
                FrmEmpresa dialog = new FrmEmpresa(this);
                desktopPane.removeAll();        
                desktopPane.add(dialog);
                
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (txtTransacao.getText().toUpperCase().equals("CAD012")) {
            try {
                FrmInsumo dialog = new FrmInsumo(this);
                desktopPane.removeAll();        
                desktopPane.add(dialog);
                
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }  else if (txtTransacao.getText().toUpperCase().equals("CAD013")) {
            try {
                FrmEquipamento dialog = new FrmEquipamento(this);
                desktopPane.removeAll();        
                desktopPane.add(dialog);
                
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }  
        else if (txtTransacao.getText().toUpperCase().equals("CAD014")) {
            try {
                FrmFazenda dialog = new FrmFazenda(this);
                desktopPane.removeAll();        
                desktopPane.add(dialog);
                
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if (txtTransacao.getText().toUpperCase().equals("CAD015")) {
            try {
                FrmSetor dialog = new FrmSetor(this);
                desktopPane.removeAll();        
                desktopPane.add(dialog);
                
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if (txtTransacao.getText().toUpperCase().equals("CAD016")) {
            try {
                FrmTalhao dialog = new FrmTalhao(this);
                desktopPane.removeAll();        
                desktopPane.add(dialog);
                
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if (txtTransacao.getText().toUpperCase().equals("CAD017")) {
            try {
                FrmOrdemCorteMuda dialog = new FrmOrdemCorteMuda(this);
                desktopPane.removeAll();        
                desktopPane.add(dialog);
                
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if (txtTransacao.getText().toUpperCase().equals("CAD018")) {
            try {
                FrmObjetivoSafra dialog = new FrmObjetivoSafra(this);
                desktopPane.removeAll();        
                desktopPane.add(dialog);
                
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if (txtTransacao.getText().toUpperCase().equals("CAD019")) {
                FrmPerfil dialog = new FrmPerfil(this);
                desktopPane.removeAll();        
                desktopPane.add(dialog);
                
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
        }
         else if (txtTransacao.getText().toUpperCase().equals("CAD020")) {
            try {
                FrmFuncionario dialog = new FrmFuncionario(this);
                desktopPane.removeAll();        
                desktopPane.add(dialog);
                
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
         else if (txtTransacao.getText().toUpperCase().equals("CAD021")) {
            try {
                FrmOrdemCorteProducao dialog = new FrmOrdemCorteProducao(this);
                desktopPane.removeAll();        
                desktopPane.add(dialog);
                
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
         else if (txtTransacao.getText().toUpperCase().equals("APT001")) {
            try {
                FrmApontamentoInsumo dialog = new FrmApontamentoInsumo(this);
                desktopPane.removeAll();        
                desktopPane.add(dialog);
                
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
         else if (txtTransacao.getText().toUpperCase().equals("APT002")) {
            try {
                FrmApontamentoPlantio dialog = new FrmApontamentoPlantio(this);
                desktopPane.removeAll();        
                desktopPane.add(dialog);
                
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }          
         else if (txtTransacao.getText().toUpperCase().equals("APT003")) {
            try {
                FrmApontamentoProducao dialog = new FrmApontamentoProducao(this);
                desktopPane.removeAll();        
                desktopPane.add(dialog);
                
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
         else if (txtTransacao.getText().toUpperCase().equals("APT004")) {
            try {
                FrmApontamentoManual dialog = new FrmApontamentoManual(this);
                desktopPane.removeAll();        
                desktopPane.add(dialog);
                
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }  
         else if (txtTransacao.getText().toUpperCase().equals("REL001")) {
                FrmRelatorioEmpresa dialog = new FrmRelatorioEmpresa(this,true);
                
        }  
         else if (txtTransacao.getText().toUpperCase().equals("REL002")) {
                FrmRelatorioProdutividade dialog = new FrmRelatorioProdutividade(this,true);
                
        }          
        else {
            JOptionPane.showMessageDialog(this, "Transação Inválida", "Aviso", JOptionPane.ERROR_MESSAGE);
            return;
        }
             
    }//GEN-LAST:event_btTransacaoActionPerformed

    private void jmenuTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jmenuTreeMouseClicked
        // TODO add your handling code here:
        //JOptionPane.showMessageDialog(this, "Safra");
       if(evt.getClickCount() == 2) {
           if(jmenuTree.getLastSelectedPathComponent().toString().equals("Safras")) {
                //JOptionPane.showMessageDialog(this, "Safra");
                FrmSafra dialog = new FrmSafra(this);        

                desktopPane.removeAll();        
                desktopPane.add(dialog);

                //dialog.setTitle("Manutenção de Safras");
                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);
           } else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Composições")) {
                FrmComposicao dialog = new FrmComposicao(this);        

                desktopPane.removeAll();        
                desktopPane.add(dialog);

                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);               
           } else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Unidades de Medida")) {
                FrmUnidadeMedida dialog = new FrmUnidadeMedida(this);        

                desktopPane.removeAll();        
                desktopPane.add(dialog);

                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);              
           } else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Espaçamentos")) {
                FrmEspacamento dialog = new FrmEspacamento(this);        

                desktopPane.removeAll();        
                desktopPane.add(dialog);

                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);               
           } else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Frente Transportes")) {
                FrmFrenteTransporte dialog = new FrmFrenteTransporte(this);        

                desktopPane.removeAll();        
                desktopPane.add(dialog);

                try {
                    dialog.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.setVisible(true);               
           }else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Variedades")) {
               try {        
                   FrmVariedade dialog = new FrmVariedade(this);        

                   desktopPane.removeAll();        
                   desktopPane.add(dialog);

                   try {
                       dialog.setMaximum(true);
                   } catch (PropertyVetoException ex) {
                       Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   dialog.setVisible(true);               
               } catch (SQLException ex) {
                   Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
               }
           }else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Municípios")) {       
                   FrmMunicipio dialog = new FrmMunicipio(this);        

                   desktopPane.removeAll();        
                   desktopPane.add(dialog);

                   try {
                       dialog.setMaximum(true);
                   } catch (PropertyVetoException ex) {
                       Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   dialog.setVisible(true);               
           }else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Unidades Industriais")) {       
               try {
                   FrmUnidadeIndustrial dialog = new FrmUnidadeIndustrial(this);        

                   desktopPane.removeAll();        
                   desktopPane.add(dialog);

                   try {
                       dialog.setMaximum(true);
                   } catch (PropertyVetoException ex) {
                       Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   dialog.setVisible(true);               
               } catch (SQLException ex) {
                   Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
               }
           }
           else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Centros de Custo")) {       
                   FrmCentroCusto dialog = new FrmCentroCusto(this);        

                   desktopPane.removeAll();        
                   desktopPane.add(dialog);

                   try {
                       dialog.setMaximum(true);
                   } catch (PropertyVetoException ex) {
                       Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   dialog.setVisible(true);               
           }else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Operações")) {       
               try {
                   FrmOperacao dialog = new FrmOperacao(this);        

                   desktopPane.removeAll();        
                   desktopPane.add(dialog);

                   try {
                       dialog.setMaximum(true);
                   } catch (PropertyVetoException ex) {
                       Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   dialog.setVisible(true);               
               } catch (SQLException ex) {
                   Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
               }
           } else if (jmenuTree.getSelectionPath().toString().equals("[AGROFÁCIL, Cadastros, Empresas]")) {       
               try {
                   FrmEmpresa dialog = new FrmEmpresa(this);        

                   desktopPane.removeAll();        
                   desktopPane.add(dialog);

                   try {
                       dialog.setMaximum(true);
                   } catch (PropertyVetoException ex) {
                       Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   dialog.setVisible(true);               
               } catch (SQLException ex) {
                   Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
               }
           } 
           else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Insumos")) {       
               try {
                   FrmInsumo dialog = new FrmInsumo(this);        

                   desktopPane.removeAll();        
                   desktopPane.add(dialog);

                   try {
                       dialog.setMaximum(true);
                   } catch (PropertyVetoException ex) {
                       Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   dialog.setVisible(true);               
               } catch (SQLException ex) {
                   Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
               }
           } else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Equipamentos")) {       
               try {
                   FrmEquipamento dialog = new FrmEquipamento(this);        

                   desktopPane.removeAll();        
                   desktopPane.add(dialog);

                   try {
                       dialog.setMaximum(true);
                   } catch (PropertyVetoException ex) {
                       Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   dialog.setVisible(true);               
               } catch (SQLException ex) {
                   Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
               }
           }                  
           else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Fazendas")) {       
               try {
                   FrmFazenda dialog = new FrmFazenda(this);        

                   desktopPane.removeAll();        
                   desktopPane.add(dialog);

                   try {
                       dialog.setMaximum(true);
                   } catch (PropertyVetoException ex) {
                       Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   dialog.setVisible(true);               
               } catch (SQLException ex) {
                   Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
               }
           }
           else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Setores")) {       
               try {
                   FrmSetor dialog = new FrmSetor(this);        

                   desktopPane.removeAll();        
                   desktopPane.add(dialog);

                   try {
                       dialog.setMaximum(true);
                   } catch (PropertyVetoException ex) {
                       Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   dialog.setVisible(true);               
               } catch (SQLException ex) {
                   Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
               }
           }
           else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Talhoes")) {       
               try {
                   FrmTalhao dialog = new FrmTalhao(this);        

                   desktopPane.removeAll();        
                   desktopPane.add(dialog);

                   try {
                       dialog.setMaximum(true);
                   } catch (PropertyVetoException ex) {
                       Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   dialog.setVisible(true);               
               } catch (SQLException ex) {
                   Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
               }
           } 
           else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Ordem Corte Muda")) {       
               try {
                   FrmOrdemCorteMuda dialog = new FrmOrdemCorteMuda(this);        

                   desktopPane.removeAll();        
                   desktopPane.add(dialog);

                   try {
                       dialog.setMaximum(true);
                   } catch (PropertyVetoException ex) {
                       Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   dialog.setVisible(true);               
               } catch (SQLException ex) {
                   Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
               }
           }
           else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Objetivos de Safra")) {       
               try {
                   FrmObjetivoSafra dialog = new FrmObjetivoSafra(this);        

                   desktopPane.removeAll();        
                   desktopPane.add(dialog);

                   try {
                       dialog.setMaximum(true);
                   } catch (PropertyVetoException ex) {
                       Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   dialog.setVisible(true);               
               } catch (SQLException ex) {
                   Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
               }
           }    
           else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Perfis")) {       
                   FrmPerfil dialog = new FrmPerfil(this);        

                   desktopPane.removeAll();        
                   desktopPane.add(dialog);

                   try {
                       dialog.setMaximum(true);
                   } catch (PropertyVetoException ex) {
                       Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   dialog.setVisible(true);               
           } 
                      else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Funcionarios")) {       
               try {
                   FrmFuncionario dialog = new FrmFuncionario(this);        

                   desktopPane.removeAll();        
                   desktopPane.add(dialog);

                   try {
                       dialog.setMaximum(true);
                   } catch (PropertyVetoException ex) {
                       Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   dialog.setVisible(true);               
               } catch (SQLException ex) {
                   Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
               }
           } 
                                 else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Ordem Corte Producao")) {       
               try {
                   FrmOrdemCorteProducao dialog = new FrmOrdemCorteProducao(this);        

                   desktopPane.removeAll();        
                   desktopPane.add(dialog);

                   try {
                       dialog.setMaximum(true);
                   } catch (PropertyVetoException ex) {
                       Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   dialog.setVisible(true);               
               } catch (SQLException ex) {
                   Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
               }
           }
           else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Apontamento Produção")) {       
               try {
                   FrmApontamentoProducao dialog = new FrmApontamentoProducao(this);        

                   desktopPane.removeAll();        
                   desktopPane.add(dialog);

                   try {
                       dialog.setMaximum(true);
                   } catch (PropertyVetoException ex) {
                       Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   dialog.setVisible(true);               
               } catch (SQLException ex) {
                   Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
               }
           }
           else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Apontamento Manual")) {       
               try {
                   FrmApontamentoManual dialog = new FrmApontamentoManual(this);        

                   desktopPane.removeAll();        
                   desktopPane.add(dialog);

                   try {
                       dialog.setMaximum(true);
                   } catch (PropertyVetoException ex) {
                       Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   dialog.setVisible(true);               
               } catch (SQLException ex) {
                   Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
               }
           } 
           else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Apontamento Insumos")) {       
               try {
                   FrmApontamentoInsumo dialog = new FrmApontamentoInsumo(this);        

                   desktopPane.removeAll();        
                   desktopPane.add(dialog);

                   try {
                       dialog.setMaximum(true);
                   } catch (PropertyVetoException ex) {
                       Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   dialog.setVisible(true);               
               } catch (SQLException ex) {
                   Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
               }
           }
           else if (jmenuTree.getLastSelectedPathComponent().toString().equals("Apontamento Plantios")) {       
               try {
                   FrmApontamentoPlantio dialog = new FrmApontamentoPlantio(this);        

                   desktopPane.removeAll();        
                   desktopPane.add(dialog);

                   try {
                       dialog.setMaximum(true);
                   } catch (PropertyVetoException ex) {
                       Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   dialog.setVisible(true);               
               } catch (SQLException ex) {
                   Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
               }
           } 
           if (jmenuTree.getSelectionPath().toString().equals("[AGROFÁCIL, Relatórios, Empresas]")) {
               if (jmenuTree.getLastSelectedPathComponent().toString().equals("Empresas")) {       
                    FrmRelatorioEmpresa dialog = new FrmRelatorioEmpresa(this,false);
               };   
           }
           if (jmenuTree.getSelectionPath().toString().equals("[AGROFÁCIL, Relatórios, Produtividade]")) {
               if (jmenuTree.getLastSelectedPathComponent().toString().equals("Produtividade")) {       
                    FrmRelatorioProdutividade dialog = new FrmRelatorioProdutividade(this,false);
               };   
           }           
       } 

    }//GEN-LAST:event_jmenuTreeMouseClicked

    private void txtTransacaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTransacaoKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTransacaoKeyPressed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        FrmSobre dialog = new FrmSobre(this, true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void contentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contentMenuItemActionPerformed
        /*
        Desktop dk = null;
        dk = Desktop.getDesktop();
        try {
            dk.open(new File("Transacoes.xlsx"));
        } catch (IOException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        FrmTransacoes dialog = new FrmTransacoes(this, true);
    }//GEN-LAST:event_contentMenuItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        this.dispose();
        FrmLogin dialog = new FrmLogin(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new FrmPrincipal().setVisible(true);
                
                // Pode ser usado para impedir o erro do Log4j
                //BasicConfigurator.configure();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton btTransacao;
    private javax.swing.JMenuItem contentMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jmenuTree;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel txtNomeUsuario;
    private javax.swing.JTextField txtTransacao;
    // End of variables declaration//GEN-END:variables
    public javax.swing.JDesktopPane desktopPane2;
    
    public javax.swing.JDesktopPane getDesktopPane() {
        return desktopPane;
    }
    
    public void initMyComponents() {
        this.btTransacao.setIcon(new ImageIcon("icons/like16.png"));
        this.setIconImage(Toolkit.getDefaultToolkit().getImage("icons/frameIcon.png"));
        this.setTitle("Gerenciamento Agrícolo AGROFÁCIL");
        txtTransacao.requestFocus();
        txtTransacao.requestFocusInWindow();
        for (int i = 0; i < jmenuTree.getRowCount(); i++) {
         jmenuTree.expandRow(i);

        }
        this.setExtendedState( getExtendedState() | JFrame.MAXIMIZED_VERT | Frame.MAXIMIZED_HORIZ);
        //this.setLocationRelativeTo(null);
        txtNomeUsuario.setText(user.getNome());
    }
    
    
    
}
